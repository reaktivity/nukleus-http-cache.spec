#
# Copyright 2016-2021 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property response1Date ${http_cache:date()} # sharedProperty
property response2Date ${http_cache:datePlus(1)} # sharedProperty
property etag1 ${http_cache:fixedStrongEtag("99999>|<1")}
property etag2 ${http_cache:fixedStrongEtag("99999>|<2")}

connect await ROUTED_PROXY
        "nukleus://streams/http-cache#0"
        option nukleus:window 8192
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${http:beginEx()
                              .typeId(nukleus:id("http"))
                              .header(":scheme", "http")
                              .header(":method", "GET")
                              .header(":path", "/data")
                              .header(":authority", "localhost:8080")
                              .build()}
connected

write close

read nukleus:begin.ext ${http:beginEx()
                              .typeId(nukleus:id("http"))
                              .header(":status", "200")
                              .header("content-length", "11")
                              .header("date", response1Date)
                              .header("surrogate-control", "max-age=100")
                              .header("etag", etag1)
                              .build()}

read "response #1"

read closed

read notify CACHE_UPDATE_RECEIVED

connect await CACHE_UPDATE_RECEIVED # Need to relay barrier due to race on write notify and nukleus process
        "nukleus://streams/http-cache#0"
        option nukleus:window 8192
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${http:beginEx()
                              .typeId(nukleus:id("http"))
                              .header(":scheme", "http")
                              .header(":method", "GET")
                              .header(":path", "/data")
                              .header(":authority", "localhost:8080")
                              .build()}
connected

write close

read nukleus:begin.ext ${http:beginEx()
                              .typeId(nukleus:id("http"))
                              .header(":status", "200")
                              .header("content-length", "11")
                              .header("date", response1Date)
                              .header("surrogate-control", "max-age=100")
                              .header("etag", etag1)
                              .build()}


read "response #1"

read closed



read notify SECOND_REQUEST_RESPONSE_COMPLETED

connect await SECOND_REQUEST_RESPONSE_COMPLETED # Need to relay barrier due to race on write notify and nukleus process
        "nukleus://streams/http-cache#0"
        option nukleus:window 8192
        option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${http:beginEx()
                              .typeId(nukleus:id("http"))
                              .header(":scheme", "http")
                              .header(":method", "GET")
                              .header(":path", "/data")
                              .header(":authority", "localhost:8080")
                              .header("cache-control", "no-cache")
                              .header("if-none-match", etag1)
                              .build()}
connected

write close

read nukleus:begin.ext ${http:beginEx()
                              .typeId(nukleus:id("http"))
                              .header(":status", "200")
                              .header("content-length", "11")
                              .header("date", response2Date)
                              .header("surrogate-control", "max-age=101")
                              .header("etag", etag2)
                              .build()}


read "response #2"

read closed